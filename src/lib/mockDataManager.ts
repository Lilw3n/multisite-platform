/**
 * GESTIONNAIRE DE DONN√âES FICTIVES - √Ä SUPPRIMER EN PRODUCTION
 * 
 * Ce fichier contient tous les utilitaires pour g√©rer les donn√©es de d√©monstration.
 * ‚ö†Ô∏è IMPORTANT : Supprimer ce fichier et toutes ses r√©f√©rences avant la mise en production !
 * 
 * Commande pour trouver toutes les r√©f√©rences :
 * grep -r "MOCK_DATA" src/
 * grep -r "mockDataManager" src/
 * grep -r "donn√©es fictives" src/
 */

export const MOCK_DATA_CONFIG = {
  // Flag pour activer/d√©sactiver les donn√©es fictives
  ENABLE_MOCK_DATA: true,
  
  // Pr√©fixes pour identifier les donn√©es fictives
  MOCK_ID_PREFIX: 'MOCK_',
  MOCK_EMAIL_DOMAIN: '@demo.diddyhome.com',
  
  // Marqueurs dans les commentaires
  MOCK_COMMENT_START: '/* === DONN√âES FICTIVES - D√âBUT === */',
  MOCK_COMMENT_END: '/* === DONN√âES FICTIVES - FIN === */',
  
  // Tags pour identifier les √©l√©ments fictifs
  MOCK_TAGS: {
    USER: '[DEMO-USER]',
    POST: '[DEMO-POST]',
    COMMUNITY: '[DEMO-COMMUNITY]',
    EVENT: '[DEMO-EVENT]',
    INTERLOCUTOR: '[DEMO-INTERLOCUTOR]',
    CONTRACT: '[DEMO-CONTRACT]',
    QUOTE: '[DEMO-QUOTE]'
  }
};

/**
 * G√©n√®re un ID fictif avec pr√©fixe identifiable
 */
export const generateMockId = (type: string): string => {
  return `${MOCK_DATA_CONFIG.MOCK_ID_PREFIX}${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

/**
 * G√©n√®re un email fictif identifiable
 */
export const generateMockEmail = (name: string): string => {
  const cleanName = name.toLowerCase().replace(/\s+/g, '.');
  return `${cleanName}${MOCK_DATA_CONFIG.MOCK_EMAIL_DOMAIN}`;
};

/**
 * V√©rifie si un √©l√©ment est fictif
 */
export const isMockData = (id: string): boolean => {
  return id.startsWith(MOCK_DATA_CONFIG.MOCK_ID_PREFIX);
};

/**
 * Nettoie toutes les donn√©es fictives d'un tableau
 */
export const removeMockData = <T extends { id: string }>(data: T[]): T[] => {
  return data.filter(item => !isMockData(item.id));
};

/**
 * Ajoute un marqueur de donn√©es fictives √† un objet
 */
export const markAsMockData = <T>(data: T, type: keyof typeof MOCK_DATA_CONFIG.MOCK_TAGS): T & { _isMockData: boolean; _mockType: string } => {
  return {
    ...data,
    _isMockData: true,
    _mockType: MOCK_DATA_CONFIG.MOCK_TAGS[type]
  };
};

/**
 * Fonction utilitaire pour logger les donn√©es fictives en d√©veloppement
 */
export const logMockDataWarning = (context: string): void => {
  if (process.env.NODE_ENV === 'development') {
    console.warn(`üöß [MOCK DATA] ${context} - Donn√©es fictives utilis√©es. √Ä supprimer en production !`);
  }
};

/**
 * Instructions pour supprimer toutes les donn√©es fictives
 */
export const CLEANUP_INSTRUCTIONS = `
üßπ INSTRUCTIONS DE NETTOYAGE POUR LA PRODUCTION :

1. Supprimer ce fichier : src/lib/mockDataManager.ts

2. Rechercher et supprimer toutes les r√©f√©rences :
   - grep -r "MOCK_DATA" src/
   - grep -r "mockDataManager" src/
   - grep -r "donn√©es fictives" src/
   - grep -r "DEMO-" src/

3. Supprimer les fichiers de donn√©es fictives :
   - src/lib/mockData.ts (si existant)
   - Tous les fichiers contenant "mock" dans le nom

4. Nettoyer les services :
   - Remplacer les donn√©es fictives par de vrais appels API
   - Supprimer les fonctions generateMock*()
   - Supprimer les conditions if (ENABLE_MOCK_DATA)

5. Nettoyer les composants :
   - Supprimer les sections marqu√©es /* === DONN√âES FICTIVES === */
   - Supprimer les props mockData
   - Supprimer les √©tats de d√©monstration

6. Nettoyer la base de donn√©es :
   - Supprimer tous les enregistrements avec des IDs commen√ßant par "MOCK_"
   - Supprimer tous les emails se terminant par "@demo.diddyhome.com"

7. Variables d'environnement :
   - Supprimer ENABLE_MOCK_DATA
   - Ajouter les vraies cl√©s API

8. Tests :
   - V√©rifier que l'application fonctionne sans donn√©es fictives
   - Tester tous les formulaires de cr√©ation
   - V√©rifier les pages vides (sans donn√©es)
`;

export default MOCK_DATA_CONFIG;
